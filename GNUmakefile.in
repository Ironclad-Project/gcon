# Nuke built-in rules and variables.
MAKEFLAGS += -rR
.SUFFIXES:

# Macros to make our build system still work from within paths with spaces
# or other special characters.
override SPACE := $(subst ,, )
override MKESCAPE = $(subst $(SPACE),\ ,$(1))
override SHESCAPE = $(subst ','\'',$(1))

# Import some autoconf variables as make variables.
override SRCDIR := @SRCDIR@
override PACKAGE_VERSION := @PACKAGE_VERSION@
override PACKAGE_TARNAME := @PACKAGE_TARNAME@
override OUTPUT := bin/$(PACKAGE_TARNAME)
override DIST_OUTPUT := $(PACKAGE_TARNAME)-$(PACKAGE_VERSION)
override WERROR_FLAG := @WERROR_FLAG@
override PKGCONF_CFLAGS := @PKGCONF_CFLAGS@
override PKGCONF_CPPFLAGS := @PKGCONF_CPPFLAGS@
override PKGCONF_LIBS := @PKGCONF_LIBS@

# Import autoconf variables that we allow the user to override.
CC := @CC@
CFLAGS := @CFLAGS@
CPPFLAGS := @CPPFLAGS@
LDFLAGS := @LDFLAGS@
LIBS := @LIBS@
STRIP := @STRIP@
MKDIR_P := @MKDIR_P@
INSTALL := @INSTALL@
INSTALL_PROGRAM := @INSTALL_PROGRAM@
prefix := @prefix@
exec_prefix := @exec_prefix@
bindir := @bindir@

# Internal C flags that should not be changed by the user.
override CFLAGS += \
    -Wall \
    -Wextra \
    -Wshadow   \
    -Wvla \
    $(WERROR_FLAG) \
    -std=gnu11 \
    $(PKGCONF_CFLAGS)

# Internal C preprocessor flags that should not be changed by the user.
override CPPFLAGS := \
    -I'$(call SHESCAPE,$(SRCDIR))/src' \
    $(PKGCONF_CPPFLAGS) \
    $(CPPFLAGS) \
    -MMD \
    -MP

# Internal libraries that should not be changed by the user.
override LIBS += \
    $(PKGCONF_LIBS)

# Use "find" to glob all *.c files in the tree and obtain the
# object and header dependency file names.
override CFILES := $(shell cd '$(call SHESCAPE,$(SRCDIR))/src' && find -L * -type f -name '*.c' | LC_ALL=C sort)
override OBJ := $(addprefix obj/,$(CFILES:.c=.c.o))
override HEADER_DEPS := $(addprefix obj/,$(CFILES:.c=.c.d))

# Default target. This must come first, before header dependencies.
.PHONY: all
all: $(OUTPUT)

# Include header dependencies.
-include $(HEADER_DEPS)

# Link rules for the final executable.
$(OUTPUT): GNUmakefile $(OBJ)
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(LDFLAGS) $(OBJ) $(LIBS) -o $@

# Compilation rules for *.c files.
obj/%.c.o: $(call MKESCAPE,$(SRCDIR))/src/%.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) -c '$(call SHESCAPE,$<)' -o $@

# Remove object files and the final executable.
.PHONY: clean
clean:
	rm -rf bin obj

# Remove files generated by configure.
.PHONY: distclean
distclean: clean
	rm -rf config.log config.status GNUmakefile

# Remove ALL generated files.
.PHONY: maintainer-clean
maintainer-clean: distclean
	cd '$(call SHESCAPE,$(SRCDIR))' && rm -rf src/flanterm configure build-aux *'~' autom4te.cache aclocal.m4

# Create a release tarball.
.PHONY: dist
dist:
	rm -rf "$(DIST_OUTPUT)"
	$(MKDIR_P) "$(DIST_OUTPUT)"
	cp -rp '$(call SHESCAPE,$(SRCDIR))'/.git "$(DIST_OUTPUT)"/
	cd "$(DIST_OUTPUT)" && git checkout .
	cd "$(DIST_OUTPUT)" && ./bootstrap
	rm -rf "$(DIST_OUTPUT)"/.git
	rm -rf "$(DIST_OUTPUT)"/.gitignore
	rm -rf "$(DIST_OUTPUT)"/.github
	rm -rf "$(DIST_OUTPUT)"/autom4te.cache
	rm -rf "$(DIST_OUTPUT)"/src/flanterm/.git
	rm -rf "$(DIST_OUTPUT)"/src/flanterm/.gitignore
	echo "$(PACKAGE_VERSION)" >"$(DIST_OUTPUT)"/version
	tar -cf "$(DIST_OUTPUT).tar" "$(DIST_OUTPUT)"
	gzip < "$(DIST_OUTPUT).tar" > "$(DIST_OUTPUT).tar.gz"
	( bzip2 < "$(DIST_OUTPUT).tar" > "$(DIST_OUTPUT).tar.bz2" || rm "$(DIST_OUTPUT).tar.bz2" )
	( xz < "$(DIST_OUTPUT).tar" > "$(DIST_OUTPUT).tar.xz" || rm "$(DIST_OUTPUT).tar.xz" )
	rm "$(DIST_OUTPUT).tar"
	rm -rf "$(DIST_OUTPUT)"

# Install files and executables to the final locations.
.PHONY: install
install: all
	$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(bindir))'
	$(INSTALL_PROGRAM) $(OUTPUT) '$(call SHESCAPE,$(DESTDIR)$(bindir))/'

# Install and strip executables.
.PHONY: install-strip
install-strip: install
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/"$$(basename '$(OUTPUT)')"

# Uninstall previously installed files and executables.
.PHONY: uninstall
uninstall:
	rm -rf '$(call SHESCAPE,$(DESTDIR)$(bindir))'/"$$(basename '$(OUTPUT)')"
